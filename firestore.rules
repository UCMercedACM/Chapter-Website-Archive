rules_version = "2";
service cloud.firestore {
  match /databases/{database}/documents {

  function isAuthAndEmailVerifiedAndSameUser(auth, id) {
  	return auth != null && auth.token.email_verified && auth.uid == id;
  }

  function isAuthAndSameUser(auth, id) {
  	return auth != null && auth.uid == id;
  }

    match /events/{apiID} {
      allow read: if true;
      allow write: if (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['attendees']))
    }
    match /users/{id} {
      allow read: if isAuthAndSameUser(request.auth, id);
      allow update: if isAuthAndSameUser(request.auth, id) && request.resource.data.diff(resource.data).affectedKeys()
        .hasOnly(['eventsAttended']);
      allow create: if request.auth != null && request.resource.data.keys().hasAll([
  "name",
  "email",
  "id",
  "eventsAttended"]) &&
    ((request.resource.data.name.size() < 10 && request.resource.data.name.size() > 2) && request.resource.data.email == request.auth.token.email && request.resource.data.id == request.auth.uid && request.resource.data.eventsAttended.size() == 0);
    }
    match /codes/{apiID} {
      allow read: if request.auth != null;
    }
  }
}
